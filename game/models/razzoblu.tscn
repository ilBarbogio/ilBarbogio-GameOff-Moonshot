[gd_scene load_steps=12 format=2]

[ext_resource path="res://models/razzoblu.escn" type="PackedScene" id=1]

[sub_resource type="Shader" id=1]
resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(0.5);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )

[sub_resource type="Shader" id=3]
resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.0, 0.010618460364639759, 0.8000000715255737,
		1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.5);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(0.5);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )

[sub_resource type="Shader" id=5]
resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;



void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}

void vertex () {
}

void fragment () {
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node0_in0_basecolor = vec4(0.023650625720620155, 0.023650625720620155,
		0.023650625720620155, 1.0);
	float node0_in1_subsurface = float(0.0);
	vec3 node0_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node0_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node0_in4_metallic = float(0.0);
	float node0_in5_specular = float(0.0);
	float node0_in6_speculartint = float(0.0);
	float node0_in7_roughness = float(1.0);
	float node0_in8_anisotropic = float(0.0);
	float node0_in9_anisotropicrotation = float(0.0);
	float node0_in10_sheen = float(0.0);
	float node0_in11_sheentint = float(0.5);
	float node0_in12_clearcoat = float(0.0);
	float node0_in13_clearcoatroughness = float(0.029999999329447746);
	float node0_in14_ior = float(1.4500000476837158);
	float node0_in15_transmission = float(0.0);
	float node0_in16_transmissionroughness = float(0.0);
	vec4 node0_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node0_in18_alpha = float(1.0);
	vec3 node0_in19_normal = NORMAL;
	vec3 node0_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node0_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_sss_strength;
	float node0_bsdf_out3_specular;
	float node0_bsdf_out2_metallic;
	float node0_bsdf_out4_roughness;
	float node0_bsdf_out5_clearcoat;
	float node0_bsdf_out6_clearcoat_gloss;
	float node0_bsdf_out7_anisotropy;
	float node0_bsdf_out8_transmission;
	float node0_bsdf_out9_ior;
	
	node_bsdf_principled(node0_in0_basecolor, node0_in1_subsurface,
		node0_in3_subsurfacecolor, node0_in4_metallic, node0_in5_specular,
		node0_in7_roughness, node0_in12_clearcoat, node0_in13_clearcoatroughness,
		node0_in8_anisotropic, node0_in15_transmission, node0_in14_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_sss_strength, node0_bsdf_out2_metallic,
		node0_bsdf_out3_specular, node0_bsdf_out4_roughness, node0_bsdf_out5_clearcoat,
		node0_bsdf_out6_clearcoat_gloss, node0_bsdf_out7_anisotropy,
		node0_bsdf_out8_transmission, node0_bsdf_out9_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SSS_STRENGTH = node0_bsdf_out1_sss_strength;
	SPECULAR = node0_bsdf_out3_specular;
	METALLIC = node0_bsdf_out2_metallic;
	ROUGHNESS = node0_bsdf_out4_roughness;
	CLEARCOAT = node0_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node0_bsdf_out6_clearcoat_gloss;
	NORMAL = node0_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node0_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node0_bsdf_out7_anisotropy;
}
"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )

[sub_resource type="ArrayMesh" id=7]
resource_name = "Cylinder012"
surfaces/0 = {
"aabb": AABB( -0.0542988, -0.226361, -0.0626989, 0.108598, 0.498705, 0.125398 ),
"array_data": PoolByteArray( 0, 0, 0, 0, 46, 203, 103, 190, 72, 104, 128, 189, 193, 0, 109, 0, 168, 75, 206, 127, 0, 60, 0, 0, 107, 104, 94, 61, 168, 24, 103, 62, 58, 104, 0, 189, 193, 0, 109, 0, 168, 75, 206, 127, 170, 58, 0, 56, 0, 0, 0, 0, 172, 112, 139, 62, 72, 104, 128, 189, 193, 0, 109, 0, 168, 75, 206, 127, 0, 60, 0, 56, 107, 104, 94, 61, 46, 203, 103, 190, 58, 104, 0, 189, 129, 0, 0, 0, 0, 181, 155, 127, 170, 58, 0, 0, 107, 104, 94, 61, 172, 112, 139, 62, 58, 104, 0, 61, 129, 0, 0, 0, 0, 181, 155, 127, 85, 57, 0, 56, 107, 104, 94, 61, 168, 24, 103, 62, 58, 104, 0, 189, 129, 0, 0, 0, 0, 181, 155, 127, 170, 58, 0, 56, 107, 104, 94, 61, 46, 203, 103, 190, 58, 104, 0, 61, 193, 0, 147, 0, 88, 75, 206, 127, 85, 57, 0, 0, 29, 86, 188, 177, 168, 24, 103, 62, 72, 104, 128, 61, 193, 0, 147, 0, 88, 75, 206, 127, 0, 56, 0, 56, 107, 104, 94, 61, 172, 112, 139, 62, 58, 104, 0, 61, 193, 0, 147, 0, 88, 75, 206, 127, 85, 57, 0, 56, 29, 86, 188, 177, 46, 203, 103, 190, 72, 104, 128, 61, 63, 0, 147, 0, 88, 181, 50, 127, 0, 56, 0, 0, 107, 104, 94, 189, 172, 112, 139, 62, 58, 104, 0, 61, 63, 0, 147, 0, 88, 181, 50, 127, 85, 53, 0, 56, 29, 86, 188, 177, 168, 24, 103, 62, 72, 104, 128, 61, 63, 0, 147, 0, 88, 181, 50, 127, 0, 56, 0, 56, 107, 104, 94, 189, 46, 203, 103, 190, 58, 104, 0, 61, 127, 0, 0, 0, 0, 75, 101, 127, 85, 53, 0, 0, 107, 104, 94, 189, 168, 24, 103, 62, 58, 104, 0, 189, 127, 0, 0, 0, 0, 75, 101, 127, 85, 49, 0, 56, 107, 104, 94, 189, 172, 112, 139, 62, 58, 104, 0, 61, 127, 0, 0, 0, 0, 75, 101, 127, 85, 53, 0, 56, 107, 104, 94, 189, 46, 203, 103, 190, 58, 104, 0, 189, 63, 0, 109, 0, 168, 181, 50, 127, 85, 49, 0, 0, 0, 0, 0, 0, 172, 112, 139, 62, 72, 104, 128, 189, 63, 0, 109, 0, 168, 181, 50, 127, 0, 0, 0, 56, 107, 104, 94, 189, 168, 24, 103, 62, 58, 104, 0, 189, 63, 0, 109, 0, 168, 181, 50, 127, 85, 49, 0, 56, 0, 0, 0, 0, 46, 203, 103, 190, 72, 104, 128, 189, 193, 0, 109, 0, 147, 0, 193, 127, 0, 60, 0, 0, 107, 104, 94, 61, 46, 203, 103, 190, 58, 104, 0, 189, 193, 0, 109, 0, 147, 0, 193, 127, 170, 58, 0, 0, 107, 104, 94, 61, 168, 24, 103, 62, 58, 104, 0, 189, 193, 0, 109, 0, 147, 0, 193, 127, 170, 58, 0, 56, 107, 104, 94, 61, 46, 203, 103, 190, 58, 104, 0, 189, 129, 0, 0, 0, 0, 0, 129, 127, 170, 58, 0, 0, 107, 104, 94, 61, 46, 203, 103, 190, 58, 104, 0, 61, 129, 0, 0, 0, 0, 0, 129, 127, 85, 57, 0, 0, 107, 104, 94, 61, 172, 112, 139, 62, 58, 104, 0, 61, 129, 0, 0, 0, 0, 0, 129, 127, 85, 57, 0, 56, 107, 104, 94, 61, 46, 203, 103, 190, 58, 104, 0, 61, 193, 0, 147, 0, 109, 0, 193, 127, 85, 57, 0, 0, 29, 86, 188, 177, 46, 203, 103, 190, 72, 104, 128, 61, 193, 0, 147, 0, 109, 0, 193, 127, 0, 56, 0, 0, 29, 86, 188, 177, 168, 24, 103, 62, 72, 104, 128, 61, 193, 0, 147, 0, 109, 0, 193, 127, 0, 56, 0, 56, 29, 86, 188, 177, 46, 203, 103, 190, 72, 104, 128, 61, 63, 0, 147, 0, 109, 0, 63, 127, 0, 56, 0, 0, 107, 104, 94, 189, 46, 203, 103, 190, 58, 104, 0, 61, 63, 0, 147, 0, 109, 0, 63, 127, 85, 53, 0, 0, 107, 104, 94, 189, 172, 112, 139, 62, 58, 104, 0, 61, 63, 0, 147, 0, 109, 0, 63, 127, 85, 53, 0, 56, 107, 104, 94, 189, 46, 203, 103, 190, 58, 104, 0, 61, 127, 0, 0, 0, 0, 0, 127, 127, 85, 53, 0, 0, 107, 104, 94, 189, 46, 203, 103, 190, 58, 104, 0, 189, 127, 0, 0, 0, 0, 0, 127, 127, 85, 49, 0, 0, 107, 104, 94, 189, 168, 24, 103, 62, 58, 104, 0, 189, 127, 0, 0, 0, 0, 0, 127, 127, 85, 49, 0, 56, 107, 104, 94, 189, 46, 203, 103, 190, 58, 104, 0, 189, 63, 0, 109, 0, 147, 0, 63, 127, 85, 49, 0, 0, 0, 0, 0, 0, 46, 203, 103, 190, 72, 104, 128, 189, 63, 0, 109, 0, 147, 0, 63, 127, 0, 0, 0, 0, 0, 0, 0, 0, 172, 112, 139, 62, 72, 104, 128, 189, 63, 0, 109, 0, 147, 0, 63, 127, 0, 0, 0, 56 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 3, 0, 5, 0, 4, 0, 6, 0, 8, 0, 7, 0, 9, 0, 11, 0, 10, 0, 12, 0, 14, 0, 13, 0, 15, 0, 17, 0, 16, 0, 18, 0, 20, 0, 19, 0, 21, 0, 23, 0, 22, 0, 24, 0, 26, 0, 25, 0, 27, 0, 29, 0, 28, 0, 30, 0, 32, 0, 31, 0, 33, 0, 35, 0, 34, 0 ),
"blend_shape_data": [  ],
"format": 97559,
"index_count": 36,
"material": SubResource( 2 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 36
}
surfaces/1 = {
"aabb": AABB( -0.083422, -0.352495, -0.087531, 0.166844, 0.720111, 0.183858 ),
"array_data": PoolByteArray( 107, 104, 94, 61, 46, 203, 103, 190, 58, 104, 0, 189, 236, 131, 0, 0, 127, 0, 0, 129, 170, 58, 0, 0, 46, 63, 155, 61, 227, 84, 107, 190, 116, 67, 51, 61, 236, 131, 0, 0, 127, 0, 0, 129, 85, 57, 0, 0, 107, 104, 94, 61, 46, 203, 103, 190, 58, 104, 0, 61, 236, 131, 0, 0, 127, 0, 0, 129, 85, 57, 0, 0, 29, 86, 188, 177, 168, 24, 103, 62, 72, 104, 128, 61, 193, 0, 147, 0, 127, 0, 0, 129, 0, 56, 0, 56, 107, 104, 94, 61, 134, 170, 152, 62, 58, 104, 0, 61, 193, 0, 147, 0, 127, 0, 0, 129, 85, 57, 0, 56, 107, 104, 94, 61, 172, 112, 139, 62, 58, 104, 0, 61, 193, 0, 147, 0, 127, 0, 0, 129, 85, 57, 0, 56, 46, 63, 155, 61, 227, 84, 107, 190, 116, 67, 51, 189, 202, 66, 93, 0, 127, 0, 0, 129, 170, 58, 0, 0, 0, 0, 0, 0, 227, 84, 107, 190, 116, 67, 179, 189, 202, 66, 93, 0, 127, 0, 0, 129, 0, 60, 0, 0, 47, 85, 85, 50, 58, 122, 180, 190, 193, 170, 186, 178, 202, 66, 93, 0, 127, 0, 0, 129, 170, 58, 0, 0, 107, 104, 94, 189, 46, 203, 103, 190, 58, 104, 0, 61, 20, 131, 0, 0, 127, 0, 0, 129, 85, 53, 0, 0, 46, 63, 155, 189, 227, 84, 107, 190, 116, 67, 51, 189, 20, 131, 0, 0, 127, 0, 0, 129, 85, 49, 0, 0, 107, 104, 94, 189, 46, 203, 103, 190, 58, 104, 0, 189, 20, 131, 0, 0, 127, 0, 0, 129, 85, 49, 0, 0, 0, 0, 0, 0, 46, 203, 103, 190, 72, 104, 128, 189, 246, 131, 17, 0, 127, 0, 0, 129, 0, 60, 0, 0, 46, 63, 155, 61, 227, 84, 107, 190, 116, 67, 51, 189, 246, 131, 17, 0, 127, 0, 0, 129, 170, 58, 0, 0, 107, 104, 94, 61, 46, 203, 103, 190, 58, 104, 0, 189, 246, 131, 17, 0, 127, 0, 0, 129, 170, 58, 0, 0, 107, 104, 94, 61, 46, 203, 103, 190, 58, 104, 0, 61, 246, 131, 239, 0, 127, 0, 0, 129, 85, 57, 0, 0, 187, 118, 3, 178, 227, 84, 107, 190, 116, 67, 179, 61, 246, 131, 239, 0, 127, 0, 0, 129, 0, 56, 0, 0, 29, 86, 188, 177, 46, 203, 103, 190, 72, 104, 128, 61, 246, 131, 239, 0, 127, 0, 0, 129, 0, 56, 0, 0, 107, 104, 94, 189, 46, 203, 103, 190, 58, 104, 0, 189, 10, 131, 17, 0, 127, 0, 0, 129, 85, 49, 0, 0, 0, 0, 0, 0, 227, 84, 107, 190, 116, 67, 179, 189, 10, 131, 17, 0, 127, 0, 0, 129, 0, 0, 0, 0, 0, 0, 0, 0, 46, 203, 103, 190, 72, 104, 128, 189, 10, 131, 17, 0, 127, 0, 0, 129, 0, 0, 0, 0, 29, 86, 188, 177, 46, 203, 103, 190, 72, 104, 128, 61, 10, 131, 239, 0, 127, 0, 0, 129, 0, 56, 0, 0, 46, 63, 155, 189, 227, 84, 107, 190, 116, 67, 51, 61, 10, 131, 239, 0, 127, 0, 0, 129, 85, 53, 0, 0, 107, 104, 94, 189, 46, 203, 103, 190, 58, 104, 0, 61, 10, 131, 239, 0, 127, 0, 0, 129, 85, 53, 0, 0, 107, 104, 94, 61, 168, 24, 103, 62, 58, 104, 0, 189, 134, 22, 231, 0, 127, 0, 0, 129, 170, 58, 0, 56, 107, 104, 94, 61, 134, 170, 152, 62, 58, 104, 0, 61, 134, 22, 231, 0, 127, 0, 0, 129, 85, 57, 0, 56, 39, 217, 170, 61, 42, 56, 188, 62, 104, 71, 69, 189, 134, 22, 231, 0, 127, 0, 0, 129, 170, 58, 0, 56, 0, 0, 0, 0, 227, 84, 107, 190, 116, 67, 179, 189, 54, 66, 93, 0, 127, 0, 0, 129, 0, 0, 0, 0, 46, 63, 155, 189, 227, 84, 107, 190, 116, 67, 51, 189, 54, 66, 93, 0, 127, 0, 0, 129, 85, 49, 0, 0, 47, 85, 85, 50, 58, 122, 180, 190, 193, 170, 186, 178, 54, 66, 93, 0, 127, 0, 0, 129, 0, 0, 0, 0, 46, 63, 155, 189, 227, 84, 107, 190, 116, 67, 51, 61, 54, 66, 163, 0, 127, 0, 0, 129, 85, 53, 0, 0, 187, 118, 3, 178, 227, 84, 107, 190, 116, 67, 179, 61, 54, 66, 163, 0, 127, 0, 0, 129, 0, 56, 0, 0, 47, 85, 85, 50, 58, 122, 180, 190, 193, 170, 186, 178, 54, 66, 163, 0, 127, 0, 0, 129, 85, 53, 0, 0, 46, 63, 155, 61, 227, 84, 107, 190, 116, 67, 51, 61, 148, 66, 0, 0, 127, 0, 0, 129, 85, 57, 0, 0, 46, 63, 155, 61, 227, 84, 107, 190, 116, 67, 51, 189, 148, 66, 0, 0, 127, 0, 0, 129, 170, 58, 0, 0, 47, 85, 85, 50, 58, 122, 180, 190, 193, 170, 186, 178, 148, 66, 0, 0, 127, 0, 0, 129, 85, 57, 0, 0, 46, 63, 155, 189, 227, 84, 107, 190, 116, 67, 51, 189, 108, 66, 0, 0, 127, 0, 0, 129, 85, 49, 0, 0, 46, 63, 155, 189, 227, 84, 107, 190, 116, 67, 51, 61, 108, 66, 0, 0, 127, 0, 0, 129, 85, 53, 0, 0, 47, 85, 85, 50, 58, 122, 180, 190, 193, 170, 186, 178, 108, 66, 0, 0, 127, 0, 0, 129, 85, 49, 0, 0, 187, 118, 3, 178, 227, 84, 107, 190, 116, 67, 179, 61, 202, 66, 163, 0, 127, 0, 0, 129, 0, 56, 0, 0, 46, 63, 155, 61, 227, 84, 107, 190, 116, 67, 51, 61, 202, 66, 163, 0, 127, 0, 0, 129, 85, 57, 0, 0, 47, 85, 85, 50, 58, 122, 180, 190, 193, 170, 186, 178, 202, 66, 163, 0, 127, 0, 0, 129, 0, 56, 0, 0, 29, 86, 188, 177, 168, 24, 103, 62, 72, 104, 128, 61, 83, 22, 163, 0, 127, 0, 0, 129, 0, 56, 0, 56, 107, 104, 94, 189, 134, 170, 152, 62, 58, 104, 0, 61, 83, 22, 163, 0, 127, 0, 0, 129, 85, 53, 0, 56, 224, 172, 16, 178, 42, 56, 188, 62, 77, 71, 197, 61, 83, 22, 163, 0, 127, 0, 0, 129, 0, 56, 0, 56, 107, 104, 94, 189, 168, 24, 103, 62, 58, 104, 0, 189, 39, 22, 118, 0, 127, 0, 0, 129, 85, 49, 0, 56, 0, 0, 0, 0, 134, 170, 152, 62, 72, 104, 128, 189, 39, 22, 118, 0, 127, 0, 0, 129, 0, 0, 0, 56, 39, 217, 170, 189, 42, 56, 188, 62, 104, 71, 69, 189, 39, 22, 118, 0, 127, 0, 0, 129, 85, 49, 0, 56, 107, 104, 94, 189, 168, 24, 103, 62, 58, 104, 0, 189, 127, 0, 0, 0, 127, 0, 0, 129, 85, 49, 0, 56, 107, 104, 94, 189, 134, 170, 152, 62, 58, 104, 0, 61, 127, 0, 0, 0, 127, 0, 0, 129, 85, 53, 0, 56, 107, 104, 94, 189, 172, 112, 139, 62, 58, 104, 0, 61, 127, 0, 0, 0, 127, 0, 0, 129, 85, 53, 0, 56, 107, 104, 94, 61, 168, 24, 103, 62, 58, 104, 0, 189, 193, 0, 109, 0, 127, 0, 0, 129, 170, 58, 0, 56, 0, 0, 0, 0, 134, 170, 152, 62, 72, 104, 128, 189, 193, 0, 109, 0, 127, 0, 0, 129, 0, 60, 0, 56, 0, 0, 0, 0, 172, 112, 139, 62, 72, 104, 128, 189, 193, 0, 109, 0, 127, 0, 0, 129, 0, 60, 0, 56, 39, 217, 170, 189, 42, 56, 188, 62, 104, 71, 69, 189, 176, 170, 210, 0, 85, 165, 22, 129, 86, 56, 10, 57, 0, 0, 0, 0, 134, 170, 152, 62, 72, 104, 128, 189, 176, 170, 210, 0, 85, 165, 22, 129, 0, 58, 20, 56, 107, 104, 94, 189, 134, 170, 152, 62, 58, 104, 0, 61, 176, 170, 210, 0, 85, 165, 22, 129, 86, 56, 245, 58, 0, 0, 0, 0, 134, 170, 152, 62, 72, 104, 128, 189, 80, 170, 210, 0, 85, 91, 234, 129, 0, 58, 20, 56, 39, 217, 170, 61, 42, 56, 188, 62, 104, 71, 69, 189, 80, 170, 210, 0, 85, 91, 234, 129, 169, 59, 10, 57, 107, 104, 94, 61, 134, 170, 152, 62, 58, 104, 0, 61, 80, 170, 210, 0, 85, 91, 234, 129, 169, 59, 245, 58, 107, 104, 94, 189, 134, 170, 152, 62, 58, 104, 0, 61, 0, 170, 92, 0, 127, 0, 0, 129, 86, 56, 245, 58, 107, 104, 94, 61, 134, 170, 152, 62, 58, 104, 0, 61, 0, 170, 92, 0, 127, 0, 0, 129, 169, 59, 245, 58, 224, 172, 16, 178, 42, 56, 188, 62, 77, 71, 197, 61, 0, 170, 92, 0, 127, 0, 0, 129, 0, 58, 235, 59, 29, 86, 188, 177, 168, 24, 103, 62, 72, 104, 128, 61, 173, 22, 163, 0, 127, 0, 0, 129, 0, 56, 0, 56, 224, 172, 16, 178, 42, 56, 188, 62, 77, 71, 197, 61, 173, 22, 163, 0, 127, 0, 0, 129, 0, 56, 0, 56, 107, 104, 94, 61, 134, 170, 152, 62, 58, 104, 0, 61, 173, 22, 163, 0, 127, 0, 0, 129, 85, 57, 0, 56, 107, 104, 94, 61, 168, 24, 103, 62, 58, 104, 0, 189, 129, 0, 0, 0, 127, 0, 0, 129, 170, 58, 0, 56, 107, 104, 94, 61, 172, 112, 139, 62, 58, 104, 0, 61, 129, 0, 0, 0, 127, 0, 0, 129, 85, 57, 0, 56, 107, 104, 94, 61, 134, 170, 152, 62, 58, 104, 0, 61, 129, 0, 0, 0, 127, 0, 0, 129, 85, 57, 0, 56, 29, 86, 188, 177, 168, 24, 103, 62, 72, 104, 128, 61, 63, 0, 147, 0, 127, 0, 0, 129, 0, 56, 0, 56, 107, 104, 94, 189, 172, 112, 139, 62, 58, 104, 0, 61, 63, 0, 147, 0, 127, 0, 0, 129, 85, 53, 0, 56, 107, 104, 94, 189, 134, 170, 152, 62, 58, 104, 0, 61, 63, 0, 147, 0, 127, 0, 0, 129, 85, 53, 0, 56, 107, 104, 94, 189, 168, 24, 103, 62, 58, 104, 0, 189, 63, 0, 109, 0, 127, 0, 0, 129, 85, 49, 0, 56, 0, 0, 0, 0, 172, 112, 139, 62, 72, 104, 128, 189, 63, 0, 109, 0, 127, 0, 0, 129, 0, 0, 0, 56, 0, 0, 0, 0, 134, 170, 152, 62, 72, 104, 128, 189, 63, 0, 109, 0, 127, 0, 0, 129, 0, 0, 0, 56, 107, 104, 94, 189, 168, 24, 103, 62, 58, 104, 0, 189, 122, 22, 231, 0, 127, 0, 0, 129, 85, 49, 0, 56, 39, 217, 170, 189, 42, 56, 188, 62, 104, 71, 69, 189, 122, 22, 231, 0, 127, 0, 0, 129, 85, 49, 0, 56, 107, 104, 94, 189, 134, 170, 152, 62, 58, 104, 0, 61, 122, 22, 231, 0, 127, 0, 0, 129, 85, 53, 0, 56, 107, 104, 94, 61, 168, 24, 103, 62, 58, 104, 0, 189, 217, 22, 118, 0, 127, 0, 0, 129, 170, 58, 0, 56, 39, 217, 170, 61, 42, 56, 188, 62, 104, 71, 69, 189, 217, 22, 118, 0, 127, 0, 0, 129, 170, 58, 0, 56, 0, 0, 0, 0, 134, 170, 152, 62, 72, 104, 128, 189, 217, 22, 118, 0, 127, 0, 0, 129, 0, 60, 0, 56, 107, 104, 94, 61, 46, 203, 103, 190, 58, 104, 0, 189, 236, 131, 0, 0, 127, 0, 0, 129, 170, 58, 0, 0, 46, 63, 155, 61, 227, 84, 107, 190, 116, 67, 51, 189, 236, 131, 0, 0, 127, 0, 0, 129, 170, 58, 0, 0, 46, 63, 155, 61, 227, 84, 107, 190, 116, 67, 51, 61, 236, 131, 0, 0, 127, 0, 0, 129, 85, 57, 0, 0, 107, 104, 94, 189, 46, 203, 103, 190, 58, 104, 0, 61, 20, 131, 0, 0, 127, 0, 0, 129, 85, 53, 0, 0, 46, 63, 155, 189, 227, 84, 107, 190, 116, 67, 51, 61, 20, 131, 0, 0, 127, 0, 0, 129, 85, 53, 0, 0, 46, 63, 155, 189, 227, 84, 107, 190, 116, 67, 51, 189, 20, 131, 0, 0, 127, 0, 0, 129, 85, 49, 0, 0, 0, 0, 0, 0, 46, 203, 103, 190, 72, 104, 128, 189, 246, 131, 17, 0, 127, 0, 0, 129, 0, 60, 0, 0, 0, 0, 0, 0, 227, 84, 107, 190, 116, 67, 179, 189, 246, 131, 17, 0, 127, 0, 0, 129, 0, 60, 0, 0, 46, 63, 155, 61, 227, 84, 107, 190, 116, 67, 51, 189, 246, 131, 17, 0, 127, 0, 0, 129, 170, 58, 0, 0, 107, 104, 94, 61, 46, 203, 103, 190, 58, 104, 0, 61, 246, 131, 239, 0, 127, 0, 0, 129, 85, 57, 0, 0, 46, 63, 155, 61, 227, 84, 107, 190, 116, 67, 51, 61, 246, 131, 239, 0, 127, 0, 0, 129, 85, 57, 0, 0, 187, 118, 3, 178, 227, 84, 107, 190, 116, 67, 179, 61, 246, 131, 239, 0, 127, 0, 0, 129, 0, 56, 0, 0, 107, 104, 94, 189, 46, 203, 103, 190, 58, 104, 0, 189, 10, 131, 17, 0, 127, 0, 0, 129, 85, 49, 0, 0, 46, 63, 155, 189, 227, 84, 107, 190, 116, 67, 51, 189, 10, 131, 17, 0, 127, 0, 0, 129, 85, 49, 0, 0, 0, 0, 0, 0, 227, 84, 107, 190, 116, 67, 179, 189, 10, 131, 17, 0, 127, 0, 0, 129, 0, 0, 0, 0, 29, 86, 188, 177, 46, 203, 103, 190, 72, 104, 128, 61, 10, 131, 239, 0, 127, 0, 0, 129, 0, 56, 0, 0, 187, 118, 3, 178, 227, 84, 107, 190, 116, 67, 179, 61, 10, 131, 239, 0, 127, 0, 0, 129, 0, 56, 0, 0, 46, 63, 155, 189, 227, 84, 107, 190, 116, 67, 51, 61, 10, 131, 239, 0, 127, 0, 0, 129, 85, 53, 0, 0 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 3, 0, 5, 0, 4, 0, 6, 0, 8, 0, 7, 0, 9, 0, 11, 0, 10, 0, 12, 0, 14, 0, 13, 0, 15, 0, 17, 0, 16, 0, 18, 0, 20, 0, 19, 0, 21, 0, 23, 0, 22, 0, 24, 0, 26, 0, 25, 0, 27, 0, 29, 0, 28, 0, 30, 0, 32, 0, 31, 0, 33, 0, 35, 0, 34, 0, 36, 0, 38, 0, 37, 0, 39, 0, 41, 0, 40, 0, 42, 0, 44, 0, 43, 0, 45, 0, 47, 0, 46, 0, 48, 0, 50, 0, 49, 0, 51, 0, 53, 0, 52, 0, 54, 0, 56, 0, 55, 0, 57, 0, 59, 0, 58, 0, 60, 0, 62, 0, 61, 0, 63, 0, 65, 0, 64, 0, 66, 0, 68, 0, 67, 0, 69, 0, 71, 0, 70, 0, 72, 0, 74, 0, 73, 0, 75, 0, 77, 0, 76, 0, 78, 0, 80, 0, 79, 0, 81, 0, 83, 0, 82, 0, 84, 0, 86, 0, 85, 0, 87, 0, 89, 0, 88, 0, 90, 0, 92, 0, 91, 0, 93, 0, 95, 0, 94, 0, 96, 0, 98, 0, 97, 0 ),
"blend_shape_data": [  ],
"format": 97559,
"index_count": 99,
"material": SubResource( 4 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 99
}
surfaces/2 = {
"aabb": AABB( -0.0542988, 0.298176, -0.0626989, 0.108598, 1.00136e-05, 0.0940483 ),
"array_data": PoolByteArray( 0, 0, 0, 0, 134, 170, 152, 62, 72, 104, 128, 189, 0, 129, 0, 0, 127, 0, 0, 129, 0, 58, 20, 56, 107, 104, 94, 61, 134, 170, 152, 62, 58, 104, 0, 61, 0, 129, 0, 0, 127, 0, 0, 129, 169, 59, 245, 58, 107, 104, 94, 189, 134, 170, 152, 62, 58, 104, 0, 61, 0, 129, 0, 0, 127, 0, 0, 129, 86, 56, 245, 58 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0 ),
"blend_shape_data": [  ],
"format": 97559,
"index_count": 3,
"material": SubResource( 6 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 3
}

[sub_resource type="SpatialMaterial" id=8]
params_cull_mode = 1

[sub_resource type="SpatialMaterial" id=9]
params_cull_mode = 1
albedo_color = Color( 0, 0.0862745, 1, 1 )

[sub_resource type="SpatialMaterial" id=10]
params_cull_mode = 1
albedo_color = Color( 0, 0, 0, 1 )

[node name="razzoblu" instance=ExtResource( 1 )]

[node name="missile002" parent="." index="0"]
mesh = SubResource( 7 )
material/0 = SubResource( 8 )
material/1 = SubResource( 9 )
material/2 = SubResource( 10 )
